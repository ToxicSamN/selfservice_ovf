"""
Django settings for credentialstore project.

Generated by 'django-admin startproject' using Django 2.0.5.

For more information on this file, see
https://docs.djangoproject.com/en/2.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.0/ref/settings/
"""

import os
import ldap
import logging.config
from django.utils.log import DEFAULT_LOGGING
from configparser import ConfigParser
from django_auth_ldap.config import LDAPGroupQuery, LDAPSearch, LDAPSearchUnion, NestedActiveDirectoryGroupType
from log.setup import LoggerSetup

parser = ConfigParser()

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
ENV_FILE = '/etc/django/selfservice_ovf/environment.conf'

parser.read(ENV_FILE)
settings_dict = parser.__dict__['_sections']['ENV']

# development/debug pparameters
if settings_dict.get('dev' or None):
    parser = ConfigParser()
    parser.read('/etc/django/selfservice_ovf/environment.conf')
    settings_dict = parser.__dict__['_sections']['ENV']

# SECURITY WARNING: don't run with debug turned on in production!
log_setup = LoggerSetup(yaml_file='{}/selfservice_ovf/logging_django_config.yml'.format(BASE_DIR))
DEBUG = False
LOGLEVEL = 'INFO'

if settings_dict.get('django_debug', None):
    if settings_dict['django_debug'] == "True":
        DEBUG = True
        LOGLEVEL = 'DEBUG'
        log_setup.set_loglevel(loglevel=LOGLEVEL)

# Disable Django's logging setup
LOGGING_CONFIG = None

# Setup Custom logging
log_setup.setup()

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = settings_dict['django_secret']
os.environ['DJANGO_SECRET'] = SECRET_KEY
os.environ['RSA_PRIV'] = settings_dict['rsa_priv']
os.environ['RSA_PUB'] = settings_dict['rsa_pub']

print('DEBUG Enabled: {}'.format(DEBUG))
print(settings_dict['django_database_path'])

# This setting is required to protect your site against some CSRF
# attacks. If you use a wildcard, you must perform your own validation
# of the Host HTTP header, or otherwise ensure that you arenâ€™t vulnerable
# to this category of attacks
ALLOWED_HOSTS = [i.strip() for i in settings_dict['allowed_hosts'].split(',')]

# HTTPS Settings

# SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')
# SECURE_SSL_REDIRECT = False
# SESSION_COOKIE_SECURE = True
# CSRF_COOKIE_SECURE = True


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'formtools',
    'rest_framework',
    'accounts',
    'ovf_deployment',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'ovf_deployment.middleware.LoginRequiredMiddleware',
]

ROOT_URLCONF = 'selfservice_ovf.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': ['templates'],
        'DIRS': [BASE_DIR + '/templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'selfservice_ovf.wsgi.application'


# Database
# https://docs.djangoproject.com/en/2.0/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql_psycopg2',
        'NAME': settings_dict['django_database_path'],
        'USER': settings_dict['psql_user'],
        'PASSWORD': settings_dict['psql_passwd'],
        'HOST': settings_dict['psql_host'],
        'PORT': settings_dict['psql_host_port'],
    }
}


# Password validation
# https://docs.djangoproject.com/en/2.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# django_auth_ldap
AUTH_LDAP_SERVER_URI = settings_dict['ldap_uri']
AD_CERT_FILE = settings_dict['https_cert']
ldap.set_option(ldap.OPT_PROTOCOL_VERSION, 3)
ldap.set_option(ldap.OPT_X_TLS_REQUIRE_CERT, ldap.OPT_X_TLS_ALLOW)
ldap.set_option(ldap.OPT_X_TLS_CACERTFILE, AD_CERT_FILE)
# LDAP_IGNORE_CERT_ERRORS = True

AUTH_LDAP_BIND_DN = settings_dict['bind_account']
AUTH_LDAP_BIND_PASSWORD = settings_dict['bind_passwd']

# LDAP USER SEARCH
AUTH_LDAP_USER_SEARCH = LDAPSearchUnion()
_ldap_search_list = []
for s in settings_dict['ldap_search'].split('"'):
    if s.lower().startswith('cn') or s.lower().startswith('ou') or s.lower().startswith('dc'):
        _ldap_search_list.append(LDAPSearch(s, ldap.SCOPE_SUBTREE, "(sAMAccountName=%(user)s)"))
AUTH_LDAP_USER_SEARCH.searches = tuple(_ldap_search_list)

AUTH_LDAP_ALWAYS_UPDATE_USER = True
AUTH_LDAP_USER_ATTR_MAP = {
    "first_name": "givenName",
    "last_name": "sn",
    "email": "mail"
}

# LDAP Group Search
prefixes = ('cn', 'ou', 'dc')
AUTH_LDAP_GROUP_SEARCH = LDAPSearchUnion()
AUTH_LDAP_GROUP_SEARCH.searches = tuple([LDAPSearch(s, ldap.SCOPE_SUBTREE, "(objectClass=group)")
                                         for s in settings_dict['ldap_grp_search'].split('"')
                                         if s.lower().startswith(prefixes)])

# Django is_active, is_staff, is_superuser
_ldap_active = tuple(s for s in settings_dict['ldap_active'].split('"') if s.lower().startswith(prefixes))
AUTH_LDAP_USER_FLAGS_BY_GROUP = {
    'is_active': _ldap_active,
    'is_staff': tuple(s for s in settings_dict['ldap_staff'].split('"') if s.lower().startswith(prefixes)),
    'is_superuser': tuple(s for s in settings_dict['ldap_super'].split('"') if s.lower().startswith(prefixes)),
}

# LDAP and Django Group Mapping
prefixes = ('[', ',', ']')
AUTH_LDAP_GROUP_TYPE = NestedActiveDirectoryGroupType()
AUTH_LDAP_FIND_GROUP_PERMS = True
AUTH_LDAP_MIRROR_GROUPS = tuple([g for g in settings_dict['ldap_mirror_groups'].split('"') if not g.startswith(prefixes)])
AUTH_LDAP_REQUIRE_GROUP = LDAPGroupQuery()
AUTH_LDAP_REQUIRE_GROUP.connector = 'OR'
AUTH_LDAP_REQUIRE_GROUP.children = _ldap_active
AUTH_LDAP_CACHE_GROUPS = True
AUTH_LDAP_GROUP_CACHE_TIMEOUT = 3600

AUTH_LDAP_CONNECTION_OPTIONS = {
    ldap.OPT_DEBUG_LEVEL: 0,
    ldap.OPT_REFERRALS: 0,
}

AUTHENTICATION_BACKENDS = (
    'django_auth_ldap.backend.LDAPBackend',
    'django.contrib.auth.backends.ModelBackend',
)

LOGIN_URL = '/accounts/login/'
LOGIN_REDIRECT_URL = '/'
LOGOUT_REDIRECT_URL = '/'
LOGIN_EXEMPT_URLS = (
    r'accounts/login/$',
    r'accounts/logout/$',
    r'wizard/$'
)

# Internationalization
# https://docs.djangoproject.com/en/2.0/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.0/howto/static-files/

STATIC_URL = '/static/'
STATICFILES_DIRS = (
    os.path.join(BASE_DIR, "assets"),
    'assets',
)
STATIC_ROOT = '/'  # os.path.join(BASE_DIR, "assets/")
# STATIC_ROOT = os.path.join(BASE_DIR, "assets")
